
char *tokenToString(TokenType tokenType) {

void checkBasicType(Type* type) {
    // TODO
    if ((type != NULL) && ((type->typeClass == TP_INT) || (type->typeClass == TP_FLOAT) || (type->typeClass == TP_CHAR)))
        return;
    else error(ERR_TYPE_INCONSISTENCY, currentToken->lineNo, currentToken->colNo);
}


token.h
-typedef enum {
-#define KEYWORDS_COUNT 

token.c
-keywords[KEYWORDS_COUNT] = {
-char *tokenToString

scanner
-printToken 
...

parser.c
-compileType
-compileBasicType
-extern Type* stringType;
symtab.h
-TypeClass
symtab.c
-make...Type

debug.c
-printType

symtab.h
-ConstantValue* makeFloatConstant(float f);
symtab.c
-ConstantValue* makeFloatConstant(float f);
-freeType
-ConstantValue* duplicateConstantValue(ConstantValue* v) 

error.h
error.c
#define NUM_OF_ERRORS 30


__________________________________
token.h
-typedef enum {
-#define KEYWORDS_COUNT 

token.c
-keywords[KEYWORDS_COUNT] = {
-char *tokenToString

parser.c
-void compileStatement(void) {
them ham
parser.h

scanner
-printToken 
...

factor
